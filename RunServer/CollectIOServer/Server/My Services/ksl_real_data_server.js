"use strict";const fs=require("fs"),path=require("path"),_=require("lodash"),KSLDataManager=require("./ksl_data_manager"),dataTypeSource=require("ksl-common").DATA_SOURCE_TYPE,got=require("got"),MAIN_CONFIG_FILE="../Config/project_config.json";class KSLRealDataServer{constructor(){this.dataManagerObj=void 0,this.clientName=void 0,this.collectSourceMap=new Map,this.timedSourceMap=new Map,this.dataSourceNodeNameMap=new Map,this.sourceNameAndTagsMap=new Map,this.tagObj=void 0,this.sourceNameMap=new Map,this.collectObj=void 0,this.logLevel="info"}async init(){let e=!0;return(e=await this._readConfigFile())&&this.collectData(),e}async _readConfigFile(){let e=!0;try{let t=JSON.parse(fs.readFileSync(path.join(__dirname,MAIN_CONFIG_FILE),"utf-8"));if(this.logLevel=t.LogLevel,logger.setLevel(this.logLevel),this.clientName=t.ClientName,!this.clientName)return logger.error("The clientName Error!File->"+MAIN_CONFIG_FILE),e=!1;logger.info("ClientName ->"+this.clientName);let a=path.join(global.projectPath,t.DataSourceManagerFile);global.activeKioMap=new Map,e=this._readEMQCfg(a);let o=path.join(global.projectPath,t.TagFile);e=this._readTagCfg(o);let s=path.join(global.projectPath,t.CollectGroupPath,t.MainProjectName,t.CollectGroupFile);e=this._readCollectGroupCfg(s),this.dataManagerObj.setCollectVarInfo(this.timedSourceMap,this.sourceNameAndTagsMap,this.clientName,this.sourceNameMap,this.logLevel)}catch(t){logger.error(t.message),e=!1}return e}_readEMQCfg(e){let t=!0,a=JSON.parse(fs.readFileSync(e,"utf-8")),o=new Map;for(let t=0;t<a.length;++t)if(dataTypeSource.EMQTT===a[t].type){let s=a[t].connInfo;if(s.password=global.decryptDatabasePwd(s.password),s.ip){if(o.has(s.ip)||o.set(s.ip,s),"string"!=typeof s.node||!s.node){logger.error("The nodeName Error! File->"+e);continue}let r={};r.ip=s.ip,r.node=s.node,this.sourceNameMap.set(a[t].name,r);let l=[];this.dataSourceNodeNameMap.has(s.ip)?((l=this.dataSourceNodeNameMap.get(s.ip)).push(s.node),this.dataSourceNodeNameMap.set(s.ip,l)):(l.push(s.node),this.dataSourceNodeNameMap.set(s.ip,l))}}for(let[e,t]of this.dataSourceNodeNameMap)logger.info("EMQ IP ->"+e+" Node Name->"+t);return 0!==o.size?(this.dataManagerObj=new KSLDataManager(o,(e,t)=>{this._callback(e,t)}),(t=this.dataManagerObj.init())||logger.error("The DataManagerObj Init Failed!")):(logger.error("EMQ Config Error!File is "+e),t=!1),t}_callback(e,t){if(Array.isArray(e)){logger.info("Online Config start modify cache");let t=JSON.parse(fs.readFileSync(path.join(__dirname,MAIN_CONFIG_FILE),"utf-8")),a=!1,o=JSON.stringify(e);if(o.includes("tag.json")){let e=path.join(global.projectPath,t.TagFile);this._readTagCfg(e),a=!0}if(o.includes("collect_group.json")){this.collectSourceMap.clear(),this.timedSourceMap.clear(),this.sourceNameAndTagsMap.clear(),this.timedSourceMap.clear();let e=path.join(global.projectPath,t.CollectGroupPath,t.MainProjectName,t.CollectGroupFile);this._readCollectGroupCfg(e),a=!0}if(o.includes("datasourceManager.json")){let e=path.join(global.projectPath,t.DataSourceManagerFile),o=JSON.parse(fs.readFileSync(e,"utf-8"));for(let e=0;e<o.length;e++)if(dataTypeSource.EMQTT==o[e].type&&!this.sourceNameMap.has(o[e].name)){let t=o[e].connInfo.ip,a=o[e].connInfo.node;this.sourceNameMap.set(o[e].name,{ip:t,node:a});let s=[];if(this.dataSourceNodeNameMap.has(t)&&(s=this.dataSourceNodeNameMap.get(t)).includes(a))continue;s.push(a),this.dataSourceNodeNameMap.set(t,s);let r=o[e].connInfo;r.password=global.decryptDatabasePwd(r.password),this.dataManagerObj.setEmqInfoMap(r,a)}a=!0}a&&(this.dataManagerObj.setCollectVarInfo(this.timedSourceMap,this.sourceNameAndTagsMap,this.clientName,this.sourceNameMap),this.dataManagerObj._queryAllTags())}else e.includes("tag.json")?this._changeTagCfg(t):e.includes("collect_group.json")?this._changeCollectCfg(t):logger.debug("Recv Online Config Changed! files->"+JSON.stringify(e))}_changeCollectCfg(e){logger.info("Online Config Changed! files->collect_group.json");let t=!1,a=!1;for(let o of Object.keys(e)){let s=e[o].CollectItemMap;if(void 0!==s&&this.collectObj.hasOwnProperty(o)){if(s=e[o],this.collectObj.hasOwnProperty(o)){for(let e of Object.keys(s))"CollectItemMap"!==e&&(this.collectObj[o][e]=s[e]);for(let a of Object.keys(e[o].CollectItemMap)){let s=e[o].CollectItemMap[a];if("DELETED"===s)this.collectObj[o].CollectItemMap.hasOwnProperty(a)&&delete this.collectObj[o].CollectItemMap[a];else if(this.collectObj[o].CollectItemMap.hasOwnProperty(a)){for(let e of Object.keys(s))this.collectObj[o].CollectItemMap[a][e]=s[e];t=!0}else this.collectObj[o].CollectItemMap[a]=s,t=!0}}}else if("DELETED"===(s=e[o]))this.collectObj.hasOwnProperty(o)&&delete this.collectObj[o];else if(this.collectObj.hasOwnProperty(o))for(let e of Object.keys(s))this.collectObj[o][e]=s[e];else this.collectObj[o]=s,a=!0,t=!0}this.timedSourceMap=new Map,this.sourceNameAndTagsMap=new Map,this.collectSourceMap=new Map,this.timedSourceMap=new Map,this._parseCollectGroupCfg(),this.dataManagerObj?(this.dataManagerObj.setCollectVarInfo(this.timedSourceMap,this.sourceNameAndTagsMap,this.clientName,this.sourceNameMap),a&&this.dataManagerObj._subscribeCollectData(),t&&this.dataManagerObj._queryAllTags()):(logger.error("dataManagerObj create failed"),ret=!1)}_changeTagCfg(e){logger.info("Online Config Changed! files->tag.json");for(let t of Object.keys(e)){let a=e[t];if("DELETED"===a)this.tagObj.hasOwnProperty(t)&&delete this.tagObj[t];else if(this.tagObj.hasOwnProperty(t))for(let e of Object.keys(a))this.tagObj[t][e]=a[e];else this.tagObj[t]=a}}_readTagCfg(e){return this.tagObj=JSON.parse(fs.readFileSync(e),"utf-8"),!0}_readCollectGroupCfg(e){return this.collectObj=JSON.parse(fs.readFileSync(e,"utf-8")),this._parseCollectGroupCfg(),!0}_parseCollectGroupCfg(){for(let e of Object.values(this.collectObj)){let t=e.DataSourceName;if(e.CollectMethod)if(this.timedSourceMap.has(t)){logger.debug("The dataSourceMap has "+t);let a=this.timedSourceMap.get(t),o=this.sourceNameAndTagsMap.get(t);for(let t of Object.values(e.CollectItemMap)){logger.debug(JSON.stringify(t.AssociatePointName)+"="+t.IOServerTagName),a[t.AssociatePointName]=e.CollectFrequency,logger.debug(a);let s=this._getTagNameById(t.TagID);if(void 0!==s){let e=o.get(t.AssociatePointName);void 0===e&&(e=[]),e.push(s),o.set(t.AssociatePointName,e)}else logger.error("Collect_group.json or tag.json Error!TagID->"+t.TagID)}this.timedSourceMap.set(t,a),this.sourceNameAndTagsMap.set(t,o)}else{logger.debug("The timedSourceMap has no "+t);let a={},o=this.sourceNameAndTagsMap.get(t);void 0===o&&(o=new Map);for(let t of Object.values(e.CollectItemMap)){logger.debug(JSON.stringify(t.AssociatePointName)+"="+t.AssociatePointName),a[t.AssociatePointName]=e.CollectFrequency,logger.debug(a);let s=this._getTagNameById(t.TagID);if(void 0!==s){let e=o.get(t.AssociatePointName);void 0===e&&(e=[]),e.push(s),o.set(t.AssociatePointName,e)}else logger.error("Collect_group.json or tag.json Error!TagID->"+t.TagID)}0!==Object.keys(a).length&&this.timedSourceMap.set(t,a),this.sourceNameAndTagsMap.set(t,o)}else if(logger.debug("SubscribeMethodObj->"+JSON.stringify(e)),this.collectSourceMap.has(t)){logger.debug("The dataSourceMap has "+t);let a=this.collectSourceMap.get(t),o=this.sourceNameAndTagsMap.get(t);for(let t of Object.values(e.CollectItemMap)){logger.debug(JSON.stringify(t.AssociatePointName)+"="+t.IOServerTagName);let e=this._getTagNameById(t.TagID);if(void 0!==e){a.push(e),logger.debug(a);let s=o.get(t.AssociatePointName);void 0===s&&(s=[]),s.push(e),o.set(t.AssociatePointName,s)}else logger.error("Collect_group.json or tag.json Error!TagID->"+t.TagID)}this.collectSourceMap.set(t,a),this.sourceNameAndTagsMap.set(t,o)}else{let a=[],o=this.sourceNameAndTagsMap.get(t);void 0===o&&(o=new Map);for(let t of Object.values(e.CollectItemMap)){logger.debug(JSON.stringify(t.AssociatePointName)+"="+t.AssociatePointName);let e=this._getTagNameById(t.TagID);if(void 0!==e){a.push(e),logger.debug(a);let s=o.get(t.AssociatePointName);void 0===s&&(s=[]),s.push(e),o.set(t.AssociatePointName,s)}else logger.error("Collect_group.json or tag.json Error!TagID->"+t.TagID)}0!==a.length&&this.collectSourceMap.set(t,a),this.sourceNameAndTagsMap.set(t,o)}}}collectData(){this.dataManagerObj.collectData()}_getTagNameById(e){if(this.tagObj.hasOwnProperty(e))return this.tagObj[e].Name}_readInnerEMQCfg(){let e=JSON.parse(fs.readFileSync(path.join(__dirname,MAIN_CONFIG_FILE),"utf-8")),t=path.join(global.projectPath,e.InnerMQCfgFile);return JSON.parse(fs.readFileSync(t,"utf-8"))}}module.exports=KSLRealDataServer;