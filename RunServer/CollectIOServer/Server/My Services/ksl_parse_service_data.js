"use strict";const fs=require("fs"),path=require("path"),SUBSCRIBE_PUBLISH_CONFIG_FILE="../Config/subscribe_publish_info.json",subscribeTopicName=require("../common_variable").subscribeTopicName,{workerData:workerData,parentPort:parentPort,threadId:threadId}=require("worker_threads"),logger=require("ksl-log-helper").logger,logLevel=workerData.logLevel;logger.setLevel(logLevel),logger.info("Parse service threadId->"+threadId);let topicInfoMap=new Map;function removeTopicInfo(e){topicInfoMap.has(e)&&topicInfoMap.delete(e)}function analysisNotAlarmData(e,t){let r={},o=[],s={};try{for(let[a,l]of t){if(0===l.Tags.length){for(let t=0;t<e.length;++t)o.push(e[t]);r=o;let t={From:"datacollectserver1"};t.RequestId=l.RequestId,t.TagValues=r,s[a]={topic:a,msg:t}}else{let t=new Map;for(let r=0;r<e.length;++r)t.set(e[r].N,e[r]);for(let e=0;e<l.Tags.length;++e){let r=t.get(l.Tags[e]);void 0!==r&&o.push(r)}if(0!==o.length){r=o;let e={From:"datacollectserver1"};e.RequestId=l.RequestId,e.TagValues=r,s[a]={topic:a,msg:e}}else logger.debug("Not Find Tags")}}}catch(e){logger.error("Parse Real Data Error->"+e.message)}return s}function analysisAlarmData(e,t){let r={};try{for(let[o,s]of t)if(o.includes("discrete")){let t={},a=o,l=s.DiscreteVars,i=[];null!=l&&void 0!=l&&(i=Object.keys(l));for(let r=0;r<e.length;++r)i.includes(e[r].N)&&(t[e[r].N]=e[r].V);if(0!==Object.keys(t).length){let e={From:"datacollectserver1"};e.RequestId=s.RequestId,e.DiscreteVars=t,r[a]={topic:a,msg:e}}}else{let t=new Map;for(let r=0;r<e.length;++r)t.set(e[r].N,e[r]);let a=o,l={},i=[];for(let e=0;e<s.Conditions.length;++e){let r=[];for(let o=0;o<s[s.Conditions[e]].length;++o){let a=t.get(s[s.Conditions[e]][o]);void 0!==a&&r.push(a)}0!==r.length&&(i.push(s.Conditions[e]),l[s.Conditions[e]]=r)}if(0!==i.length){let e={From:"datacollectserver1"};e.RequestId=s.RequestId,e.Conditions=i,e.TagValues=l,r[a]={topic:a,msg:e}}}}catch(e){logger.error("Parse Alarm Data Error->"+e.message)}return r}function saveSubscribePublishInfo(){let e={};for(let[t,r]of topicInfoMap){let o={};for(let[e,t]of r)o[e]=t;e[t]=o}e["script_subscribe/io_var_changed"]={io_var_changed:{From:"io_var_changed",Tags:[]}};try{fs.writeFileSync(path.join(__dirname,SUBSCRIBE_PUBLISH_CONFIG_FILE),JSON.stringify(e),"utf-8")}catch(e){logger.error("Write Subscribe and Publish Error->"+e)}}function isSubscribePublishConfigEmpty(){if(0===topicInfoMap.size){try{let e=JSON.parse(fs.readFileSync(path.join(__dirname,SUBSCRIBE_PUBLISH_CONFIG_FILE),"utf-8"));for(let t of Object.keys(e)){let r=new Map;for(let o of Object.keys(e[t]))r.set(o,e[t][o]);topicInfoMap.set(t,r)}}catch(e){logger.error("Read Subscribe and Publish Config Error->"+e)}return!0}return!1}parentPort.on("message",e=>{try{let t=[],r=e.topic;if(void 0===r){isSubscribePublishConfigEmpty()&&logger.info("Collect Server has Restart");for(let[r,o]of topicInfoMap){let s=null;if(s=r.includes(subscribeTopicName[0])?analysisAlarmData(e,o):analysisNotAlarmData(e,o))for(let e of Object.keys(s)){let r={};r[e]=s[e],t.push(r)}else logger.error("The Result of Analysis Data is Empty! Topic->"+r)}let r={};r.msg=t,parentPort.postMessage(r)}else{let t=e.recvJsonObj;if("object"!=typeof t)return void logger.error("The Data is not object!");let o=t.From;if(void 0===o)return void logger.error("The From is not object!");let s=new Map;topicInfoMap.get(r)&&(s=topicInfoMap.get(r)),s.set(o,t),topicInfoMap.set(r,s),saveSubscribePublishInfo()}}catch(e){logger.error("Parse Real Data Thread Error->"+e.message)}});