let _platform=process.platform;const _linux="linux"===_platform||"android"===_platform,moment=require("moment"),exec=require("child_process").exec,RedisClusterOp=require("ksl-redis"),logger=require("ksl-log-helper").logger,KSLMQManager=require("ksl-mqtt"),mqOperateType=require("ksl-common").MQ_OPERATE_TYPE;logger.setLevel("info"),process.env.servername="collectioserver_work_process";let heartStatus=0;const Config={updateSystemTimeVar:!0,updateDeviceVar:!1,checkOnline:!0,updateSystemTimeInterVal:1e3,updateDeviceInterVal:3e4,checkOnlineInterVal:1e3};let otherServiceSubscribeManagerObj=void 0,redisObj=void 0;function readInnerEMQCfg(e){let r=!0;try{let t=e.ip,o=e.port;if(void 0===t||void 0===o)return logger.error("The Inner emqCfgFile IP or Port is Undefined! IP->"+t+" port->"+o),r=!1;let s=e.userName,n=e.password;otherServiceSubscribeManagerObj=new KSLMQManager(t,o,{username:s,password:n})}catch(e){logger.error("Real Process Error!->"+e.message),r=!1}return r}function readRealDBCfg(e){let r=!0;try{let t=e.mode,o={},s=[];if(0===t)o={host:e.singleRedis.connInfo.ip,port:e.singleRedis.connInfo.port,password:e.singleRedis.connInfo.password};else if(1===t){let r=e.multiRedis;for(const e of r){let r={host:e.connInfo.ip,port:e.connInfo.port,password:e.connInfo.password};s.push(r)}}else logger.warn("redis mode error");redisObj=new RedisClusterOp(t,o,s).getClient()}catch(e){logger.error("Write Redis Process Error!->"+e.message),r=!1}return r}function startinterVal(){var e=["$Year","$Month","$Day","$Hour","$Minute","$Second","$MilliSecond","$Date","$Time","$DayofWeek"];let r=["$cpuCurrentLoad","$cpuTemperature","$memCurrentLoad"],t=-1,o=-1;Config.updateSystemTimeVar&&setInterval(function(){let r={From:"collectioserver",TagValues:[]},t={tagInfo:{}},o=new Date,s=o.getFullYear(),n=o.getMonth()+1,a=o.getDate(),l=o.getHours(),i=o.getMinutes(),c=o.getSeconds(),g=o.getMilliseconds(),m=[s,n,a,l,i,c,g,s+"-"+(n>=10?n:"0"+n)+"-"+(a>=10?a:"0"+a),(l>=10?l:"0"+l)+":"+(i>=10?i:"0"+i)+":"+(c>=10?c:"0"+c)+":"+g,o.getDay()];for(let o=0;o<e.length;o++){let s=e[o],n=m[o],a={};a.N=s,a.Q=192,a.T=moment().format("YYYY-MM-DD HH:mm:ss.SSS"),a.V=n,t.tagInfo["real_"+s]=JSON.stringify(a),r.TagValues.push(a)}dealMemData({redisInfo:t,mqttInfo:{topic:"realtime_memory_all",msg:r}})},Config.updateSystemTimeInterVal),Config.updateDeviceVar&&setInterval(()=>{let e={From:"collectioserver",TagValues:[]},s={tagInfo:{}};_linux&&exec("top -n 1 -b|head -6",function(e,r){if(e)console.error("realtimeChangeSystemValue err: ",e);else{let e=r.toString().split("\n");for(let r=2;r<e.length;r++){let s=e[r];switch(s=s.trim().split(/\s+/),r){case 2:if(console.log("cpu: ",s[6],"     ",s[7]),s[7].includes("id")){let e=s[6].replace("ni,","");t=1*(100-Number.parseFloat(e)).toFixed(2)}else t=1*(100-Number.parseFloat(s[7])).toFixed(2);console.log("cpu: ",t);break;case 3:o=1*(o=100*(1-(o=Number.parseInt(s[5])/Number.parseInt(s[3])))).toFixed(2)}}}});let n=[t,-1,o];for(let t=0;t<r.length;t++){let o=r[t],a=n[t],l={};l.N=o,l.Q=192,l.T=moment().format("YYYY-MM-DD HH:mm:ss.SSS"),l.V=a,s.tagInfo["real_"+o]=JSON.stringify(l),e.TagValues.push(l)}process.send({interValQueryRet:{redisInfo:s,mqttInfo:{topic:"realtime_memory_all",msg:e}}}),dealMemData({redisInfo:s,mqttInfo:{topic:"realtime_memory_all",msg:e}})},Config.updateDeviceInterVal)}function dealMemData(e){let r=JSON.stringify(e.redisInfo);redisObj.pipelineSetAsync(r).then(e=>{}).catch(e=>{logger.error("[intervalQueryTask] write redis err : ",e)}),otherServiceSubscribeManagerObj.handleMQOperate(mqOperateType.PUBLISH,e.mqttInfo)}setInterval(()=>{5<(heartStatus+=1)&&process.exit(),process.send({heartbeat:"ping"})},1e4),process.on("message",e=>{"object"==typeof e&&(e.hasOwnProperty("emqcfg")?(logLevel=e.logLevel,logger.setLevel(logLevel),readRealDBCfg(e.rediscfg),readInnerEMQCfg(e.emqcfg),startinterVal()):e.hasOwnProperty("heartbeat")&&"pong"===e.heartbeat&&(heartStatus=0,logger.debug("alarm process rec pong")))}),["SIGINT","SIGTERM","SIGQUIT"].forEach(e=>process.on(e,async()=>{console.log("Main process recv exit signal"),process.exit()}));