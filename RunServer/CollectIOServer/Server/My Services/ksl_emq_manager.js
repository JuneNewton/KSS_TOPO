"use strict";const fs=require("fs"),path=require("path"),{Worker:Worker,isMainThread:isMainThread}=require("worker_threads"),KSLMQManager=require("ksl-mqtt"),Chokidar=require("chokidar"),{logger:logger}=require("ksl-log-helper"),mqOperateType=require("ksl-common").MQ_OPERATE_TYPE,managerType=require("ksl-common").MANAGER_TYPE,publishMQTopicName=require("../common_variable").publishMQTopicName,WATCH_CONFIG_FILE="../Config/ksl_tag_msg.json",MAIN_CONFIG_FILE="../Config/project_config.json",WRITE_REDIS_INTERVAL=100,WRITE_REDIS_LIMIT=1e3;class KSLEmqServerManager{constructor(e,r,i,t){this.ip=e,this.port=r,this.extOption=i,this.mqManagerObj=new KSLMQManager(this.ip,this.port,this.extOption),this.timerCollectObj=new Map,this.sourceNameAndTagsMap=new Map,this.mqWorker=void 0,this.serviceWorker=void 0,this.isTest=!1,this.clientName=void 0,this.callback=t,this.lastTime=100,this.unHandledRedisData={},this.redis=void 0,this.timedSubsrcibeMap=new Map,this.sourceNameArray=[],this.msg={},this.topicAndTimeMap=new Map,this.ioserverWillTopic=void 0,this.innierIOserverWillTopic=void 0}init(){let e=!0;return e=this._readConfigFile()}_readConfigFile(){let e=!0;try{let r=JSON.parse(fs.readFileSync(path.join(__dirname,MAIN_CONFIG_FILE),"utf-8"));this.ioserverWillTopic=r.IOserverWillTopic,this.innierIOserverWillTopic=r.InnerIOserverWillTopic,null!==this.ioserverWillTopic&&null!==this.innierIOserverWillTopic||logger.error("KIOServer Lost Topic is Null!"),this.handleDataOperate(mqOperateType.SUBSCRIBE,this.ioserverWillTopic),Chokidar.watch(path.join(__dirname,WATCH_CONFIG_FILE)).on("change",e=>{try{let r=JSON.parse(fs.readFileSync(e,"utf-8"));this.isTest=r.IsTest,logger.info("the Test is "+this.isTest)}catch(e){logger.error(e.message)}})}catch(r){logger.error(logger.error(r.message)),e=!1}return e}setCollectVarInfo(e,r,i,t,s){if(this.timerCollectObj=e,this.sourceNameAndTagsMap=r,this.clientName=i,this.sourceNameArray=t,this.msg.Type=1,this.msg.Qid=12345678,this.msg.WhoQ=this.clientName,this.msg.PNs={4:"V",5:"T",6:"Q"},isMainThread){let e={};e.sourceNameAndTagsMap=this.sourceNameAndTagsMap,e.clientName=this.clientName,e.kio_info_key_tmp=global.kio_info_key,e.logLevel=s,void 0===this.mqWorker?(this.mqWorker=new Worker(path.join(__dirname+"/ksl_parse_mq_data.js"),{workerData:e}),this.mqWorker.on("message",e=>{this._recvFromMqWorker(e)}),this.mqWorker.on("error",e=>{logger.info("MQ Worker Error->"+e)}),this.mqWorker.on("exit",e=>{logger.info("MQ Worker Exit Code->"+e)})):this.mqWorker.postMessage(e),void 0===this.serviceWorker&&(this.serviceWorker=new Worker(path.join(__dirname+"/ksl_parse_service_data.js"),{workerData:e}),this.serviceWorker.on("message",e=>{this._recvFromServiceWorker(e)}),this.serviceWorker.on("error",e=>{logger.info("Service Worker Error->"+e)}),this.serviceWorker.on("exit",e=>{logger.info("Service Worker Exit Code->"+e)}))}}setOtherServiceData(e){this.serviceWorker.postMessage(e)}setRedisObj(e){this.redis=e}timedCollectData(){let e={};for(let r of Object.keys(this.timerCollectObj)){let i=this.timerCollectObj[r];logger.info("tag->"+r+" timeInterval->"+i);let t=i+"";e[t]||(e[t]=[]),e[t].push(r)}for(let r=0;r<this.sourceNameArray.length;++r){let i=publishMQTopicName[0]+this.sourceNameArray[r];logger.info("topic->"+i),this.timedSubsrcibeMap.set(i,e)}0!==this.timedSubsrcibeMap.size&&setInterval(()=>{this._timedSubscribeData()},100)}_timedSubscribeData(){let e=(new Date).getTime();for(let[r,i]of this.timedSubsrcibeMap){logger.debug("topic->"+r+" tags->"+JSON.stringify(i));for(let t of Object.keys(i)){logger.debug("interval->"+t+" value->"+JSON.stringify(i[t])),this.msg.ObjNs=i[t];let s={topic:r,msg:this.msg},o=r+"_"+t,a=this.topicAndTimeMap.get(o);void 0!==a?e-a>=parseInt(t)&&(logger.debug("Publish Topic->"+r+" Msg->"+JSON.stringify(this.msg)),this.topicAndTimeMap.set(o,e),this.handleDataOperate(mqOperateType.PUBLISH,s)):(logger.debug("Publish Topic->"+r+" Msg->"+JSON.stringify(this.msg)),this.topicAndTimeMap.set(o,e),this.handleDataOperate(mqOperateType.PUBLISH,s))}}}handleDataOperate(e,r){switch(e){case mqOperateType.SUBSCRIBE:this.mqManagerObj.handleMQOperate(e,r,(e,r)=>{this._handleMQData(e,r)});break;case mqOperateType.PUBLISH:case mqOperateType.UNSUBSCRIBE:this.mqManagerObj.handleMQOperate(e,r)}}_handleMQData(e,r){if(void 0!==e&&void 0!==r){if(e.includes("query_result_")){let r=this._findSourceFromTopic(e);global.onlineIOserverSet.add(r);let i={topic:this.innierIOserverWillTopic,msg:{dataSourceNodeOnline:Array.from(global.onlineIOserverSet)},options:{qos:2,retain:!0}};this.callback(i)}if(e!==this.ioserverWillTopic){let i={};try{i=JSON.parse(r)}catch(e){return void logger.error("MQ Data Error->"+e)}this.isTest&&logger.info("Recv Data From MQ! Topic->"+e+"|| Data->"+JSON.stringify(i));let t={};if(e!==this.ioserverWillTopic&&(t.topic=e,t.msg=i,this.mqWorker.postMessage(t)),e.includes("datachange_")){let r=this._findSourceFromTopic(e);if(!global.onlineIOserverSet.has(r)){global.onlineIOserverSet.add(r);let e={topic:this.innierIOserverWillTopic,msg:{dataSourceNodeOnline:Array.from(global.onlineIOserverSet)},options:{qos:2,retain:!0}};this.callback(e)}}}else{let e=[];e.push(String(r));let i={topic:this.innierIOserverWillTopic,msg:{dataSourceNode:e}};this.callback(i),global.onlineIOserverSet.delete(...e);let t={topic:this.innierIOserverWillTopic,msg:{dataSourceNodeOnline:Array.from(global.onlineIOserverSet)},options:{qos:2,retain:!0}};this.callback(t)}}else logger.error("Recv MQ Topic or Msg is Undefined! topic->"+e+" recvData->"+r)}_recvFromMqWorker(e){let r=e.msg;if(0!==r.length)if(global.accurateSubEnable)this.callback(e);else{this.serviceWorker.postMessage(r);try{this._writeDataToRedis(r)}catch(e){logger.error("Redis Error "+e.message)}}}_recvFromServiceWorker(e){this.callback(e)}_handleOtherServiceData(e,r){if(void 0===e||void 0===r)return void logger.error("The Topic or RecvData is Undefined! Topic->"+e+" RecvData->"+r);let i={};try{i=JSON.parse(r)}catch(e){return void logger.error("Other Service Data Error->"+e)}let t={};t.topic=e,t.recvJsonObj=i,this.serviceWorker.postMessage(t)}_writeDataToRedis(e){if(0===e.length)return void logger.error("The handledJsonObj is Empty");for(var r=0;r<e.length;++r){let i="real_"+e[r].N;this.unHandledRedisData[i]=JSON.stringify(e[r]),logger.debug("write to Redis key->"+i+" value->"+this.unHandledRedisData[i])}let i=Object.keys(this.unHandledRedisData).length,t=(new Date).getTime();if(logger.debug("+++++++++++++++++++++++++time interval->"+(t-this.lastTime)+" dataLength->"+i),i>=WRITE_REDIS_LIMIT||t-this.lastTime>=WRITE_REDIS_INTERVAL){let e={tagInfo:this.unHandledRedisData},r=JSON.stringify(e);this.isTest&&logger.info("Write to Redis! "+r),this.redis.pipelineSetAsync(r).then().catch(e=>logger.debug(e)),this.lastTime=t,this.unHandledRedisData={}}}_findSourceFromTopic(e){return e.includes("datachange_")?e=e.replace("datachange_",""):e.includes("query_result_")?e=(e=e.replace("query_result_","")).replace("_"+this.clientName,""):(logger.error("This Topic is not datachange ->"+e),e=null),e}}module.exports=KSLEmqServerManager;