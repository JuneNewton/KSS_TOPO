"use-struct";const path=require("path"),KSLMQManager=require("ksl-mqtt"),mqOperateType=require("ksl-common").MQ_OPERATE_TYPE,{Worker:Worker,threadId:threadId}=require("worker_threads"),logger=require("ksl-log-helper").logger,WORKER_THREAD_NUM=1;let heartStatus=0,topicInfoMap=new Map,logLevel="info";function readInnerEMQCfg(e){let r=!0;try{let o=e.ip,t=e.port;if(void 0===o||void 0===t)return logger.error("The Inner emqCfgFile IP or Port is Undefined! IP->"+o+" port->"+t),r=!1;let a=e.userName,s=e.password;otherServiceSubscribeManagerObj=new KSLMQManager(o,t,{username:a,password:s})}catch(e){logger.error("Script Process Error!->"+e.message),r=!1}return r}function recvFromWorker(e){let r=e.msg;if(r)for(let e of Object.keys(r))otherServiceSubscribeManagerObj.handleMQOperate(mqOperateType.PUBLISH,r[e]);else logger.error("The Result of Analysis Data is Empty! Topic->"+key)}function createWorkerObj(){for(let e=0;e<WORKER_THREAD_NUM;++e)createSingleWorkerObj(e)}function createSingleWorkerObj(e){if(e<0||e>WORKER_THREAD_NUM)return void logger.error("Parse Script Process: ID out of the Limit Value->"+e);let r={};r.logLevel=logLevel,worker[e]=new Worker(path.join(__dirname+"/ksl_parse_script.js"),{workerData:r}),worker[e].on("message",e=>{recvFromWorker(e)}),worker[e].on("error",r=>{logger.error("Parse Script Worker Error! ID->"+e+" Error->"+r),createSingleWorkerObj(e)}),worker[e].on("exit",r=>{logger.warn("Parse Script Worker Exit! ID->"+e+" Code->"+r)})}function removeTopicInfo(e){topicInfoMap.has(e)&&topicInfoMap.delete(e)}worker=[],otherServiceSubscribeManagerObj=void 0,process.on("SIGTERM",e=>{logger.warn(`ScriptCalculate process recv signal:${e}`),process.exit()}),process.on("message",e=>{if("object"==typeof e)if(e.hasOwnProperty("cfg"))readInnerEMQCfg(e.cfg),logLevel=e.logLevel,logger.setLevel(logLevel),createWorkerObj();else if(e.hasOwnProperty("heartbeat"))"pong"===e.heartbeat&&(heartStatus=0,logger.debug("alarm process rec pong"));else{let r=e.topic;if(r.startsWith("script_subscribe/")){let o=e.msg;if("object"!=typeof o)return void logger.error("The Data is not object!");let t=o.From;if(void 0===t)return void logger.error("The From is not object!");console.log("addTopicInfo topic => "+r+" From->"+t+" Data->"+JSON.stringify(o));let a=new Map;topicInfoMap.get(r)&&(a=topicInfoMap.get(r)),a.set(t,o),topicInfoMap.set(r,a)}else for(let[r,o]of topicInfoMap){let t={};t.unhandledDataObj=e.msg,t.topic=r,t.subscribeTopicObj=o;let a=Math.floor(Math.random()*WORKER_THREAD_NUM);worker[a].postMessage(t)}}}),setInterval(()=>{5<(heartStatus+=1)&&process.exit(),process.send({heartbeat:"ping"})},1e4);