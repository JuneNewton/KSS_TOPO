"use strict";const fs=require("fs"),path=require("path"),childProcess=require("child_process"),Chokidar=require("chokidar"),_=require("lodash"),KSLMQManager=require("ksl-mqtt"),KSLEmqServerManager=require("./ksl_emq_manager"),RedisClusterOp=require("ksl-redis"),{logger:logger}=require("ksl-log-helper"),mqOperateType=require("ksl-common").MQ_OPERATE_TYPE,subscribeMQTopicName=require("../common_variable").subscribeMQTopicName,publishMQTopicName=require("../common_variable").publishMQTopicName,MAIN_CONFIG_FILE="../Config/project_config.json",WATCH_CONFIG_FILE="../Config/ksl_tag_msg.json",ERROR_CONFIG_FILE="../Config/ksl_errormsg.json",MULTINETCARD_MAP_FILE="../Config/extern.json",DATA_CHANGE_TOPIC=0;class KSLDataManager{constructor(e,a){this.emqInfoMap=e,this.mqManagerObjMap=new Map,this.writeRedisObj=void 0,this.handleRealDataObj=void 0,this.handleAlarmDataObj=void 0,this.handleRunbgDataObj=void 0,this.handleScriptDataObj=void 0,this.handleSystemMemDataObj=void 0,this.otherServiceSubscribeManagerObj=void 0,this.collectSourceMap=new Map,this.timerSourceMap=new Map,this.timedSubsrcibeMap=new Map,this.redis=void 0,this.redisCfgObj=null,this.emqCfgObj=null,this.sourceNameAndTagsMap=new Map,this.isTest=!1,this.clientName=void 0,this.sourceNameMap=new Map,this.msg={},this.innierIOserverWillTopic=void 0,this.callback=a,this.logLevel="info",this.timeoutInterval=void 0,this.onlineFileList=[]}init(){let e=!0;return(e=this._readConfigFile())&&(this._createMqManagerObj(),this._createSystemMemDataProcess(),global.accurateSubEnable&&(this._createWorkerProcess(),process.on("SIGTERM",()=>{this.handleSystemMemDataObj.kill(),this._killAllChildProcess(),process.exit()}))),e}setEmqInfoMap(e,a){if(!this.emqInfoMap.has(e.ip)){this.emqInfoMap.set(e.ip,e);let a=e.port||void 0,t={username:e.username||void 0,password:e.password||void 0};if(a){let r=new KSLEmqServerManager(e.ip,a,t,e=>{this._callback(e)});r.init(),this.mqManagerObjMap.set(e.ip,r)}else logger.error("setEmqInfoMap EMQ Config Error!IP->"+e.ip+" Port->"+a)}let t=this._getNodeNameByIP(e.ip);for(let r=0;r<t.length;r++)if(t[r]==a)for(let a=0;a<subscribeMQTopicName.length;a++){let s=void 0;s=DATA_CHANGE_TOPIC!==a?subscribeMQTopicName[a]+t[r]+"_"+this.clientName:subscribeMQTopicName[a]+t[r],this.mqManagerObjMap.get(e.ip).handleDataOperate(mqOperateType.SUBSCRIBE,s)}this.mqManagerObjMap.get(e.ip).timedCollectData()}_handleOnlineCfg(e){logger.info("Online Config Changed");e.projects;let a=e.files,t=_.get(e,"reload",[]);if(fs.writeFileSync("online.json",JSON.stringify(e)),void 0!==a)for(let e=0;e<t.length;e++)this.onlineFileList.push(...t),(t[e].includes("collect_group.json")||t[e].includes("tag.json"))&&(this.timeoutInterval&&(clearTimeout(this.timeoutInterval),this.timeoutInterval=void 0),this.timeoutInterval=setTimeout(()=>{this.callback(this.onlineFileList,t[e]),clearTimeout(this.timeoutInterval),this.timeoutInterval=void 0,this.onlineFileList=[]},1e3));else logger.info("files is null")}_createMqManagerObj(){for(let[e,a]of this.emqInfoMap){let t=a.port||void 0,r=a.username||void 0,s=a.password||void 0;if(t){let a=new KSLEmqServerManager(e,t,{username:r,password:s},e=>{this._callback(e)});a.init(),this.mqManagerObjMap.set(e,a)}else logger.error("EMQ Config Error!IP->"+e+" Port->"+t)}}_createWorkerProcess(){this._createWriteRedisProcess(),this._createParseRealDataProcess(),this._createParseAlarmDataProcess(),this._createParseRunbgDataProcess(),this._createParseScriptDataProcess()}_killAllChildProcess(){this.writeRedisObj.kill(),this.handleRealDataObj.kill(),this.handleAlarmDataObj.kill(),this.handleRunbgDataObj.kill(),this.handleScriptDataObj.kill(),logger.warn("All child process exit")}_createWriteRedisProcess(){logger.info("创建写redis数据的进程"),this.writeRedisObj=childProcess.fork(path.join(__dirname+"/write_redis_data/ksl_write_redis_process.js")),this.writeRedisObj.on("error",e=>{logger.error("The WriteRedisObj Error! Error->"+e),this._createWriteRedisProcess()}),this.writeRedisObj.on("exit",(e,a)=>{logger.warn("The WriteRedisObj Exit!  Code->"+e+" Signal->"+a),this._createWriteRedisProcess()}),this.writeRedisObj.connected&&this.writeRedisObj.send({cfg:this.redisCfgObj,logLevel:this.logLevel}),this.writeRedisObj.on("unhandledRejection",(e,a)=>{logger.warn("writeRedisObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.writeRedisObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.writeRedisObj.connected&&(this.writeRedisObj.send({heartbeat:"pong"}),logger.info("main process send writeRedisObj : pong"))})}_createParseRealDataProcess(){logger.info("创建处理客户端接口服务实时数据的进程"),this.handleRealDataObj=childProcess.fork(path.join(__dirname+"/parse_real_data/ksl_parse_real_process.js")),this.handleRealDataObj.on("error",e=>{logger.error("The HandleRealDataObj Error! Error->"+e),this._createParseRealDataProcess()}),this.handleRealDataObj.on("exit",(e,a)=>{logger.warn("The HandleRealDataObj Exit!  Code->"+e+" Signal->"+a),this._createParseRealDataProcess()}),this.handleRealDataObj.connected&&this.handleRealDataObj.send({cfg:this.emqCfgObj,logLevel:this.logLevel}),this.handleRealDataObj.on("unhandledRejection",(e,a)=>{logger.info("handleRealDataObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.handleRealDataObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.handleRealDataObj.connected&&(this.handleRealDataObj.send({heartbeat:"pong"}),logger.info("main process send handleRealDataObj : pong"))})}_createParseAlarmDataProcess(){logger.info("创建处理报警服务的报警数据的进程"),this.handleAlarmDataObj=childProcess.fork(path.join(__dirname+"/parse_alarm_data/ksl_parse_alarm_process.js")),this.handleAlarmDataObj.on("error",e=>{logger.error("The HandleAlarmDataObj Error! Error->"+e),this._createParseAlarmDataProcess()}),this.handleAlarmDataObj.on("exit",(e,a)=>{logger.warn("The HandleAlarmDataObj Exit!  Code->"+e+" Signal->"+a),this._createParseAlarmDataProcess()}),this.handleAlarmDataObj.connected&&this.handleAlarmDataObj.send({cfg:this.emqCfgObj,logLevel:this.logLevel}),this.handleAlarmDataObj.on("unhandledRejection",(e,a)=>{logger.info("handleAlarmDataObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.handleAlarmDataObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.handleAlarmDataObj.connected&&(this.handleAlarmDataObj.send({heartbeat:"pong"}),logger.info("main process send handleAlarmDataObj : pong"))})}_createParseRunbgDataProcess(){logger.info("创建处理运行后台服务数据的进程"),this.handleRunbgDataObj=childProcess.fork(path.join(__dirname+"/parse_runbg_data/ksl_parse_runbg_process.js")),this.handleRunbgDataObj.on("error",e=>{logger.error("The HandleRunbgDataObj Error! Error->"+e),this._createParseRunbgDataProcess()}),this.handleRunbgDataObj.on("exit",(e,a)=>{logger.warn("The HandleRunbgDataObj Exit!  Code->"+e+" Signal->"+a),this._createParseRunbgDataProcess()}),this.handleRunbgDataObj.connected&&this.handleRunbgDataObj.send({cfg:this.emqCfgObj,logLevel:this.logLevel}),this.handleRunbgDataObj.on("unhandledRejection",(e,a)=>{logger.info("handleRunbgDataObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.handleRunbgDataObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.handleRunbgDataObj.connected&&(this.handleRunbgDataObj.send({heartbeat:"pong"}),logger.info("main process send handleRunbgDataObj : pong"))})}_createParseScriptDataProcess(){logger.info("创建处理脚本计算服务数据的进程"),this.handleScriptDataObj=childProcess.fork(path.join(__dirname+"/parse_script_data/ksl_parse_script_process.js")),this.handleScriptDataObj.on("error",e=>{logger.error("The handleScriptDataObj Error! Error->"+e),this._createParseScriptDataProcess()}),this.handleScriptDataObj.on("exit",(e,a)=>{logger.warn("The handleScriptDataObj Exit!  Code->"+e+" Signal->"+a),this._createParseScriptDataProcess()}),this.handleScriptDataObj.connected&&this.handleScriptDataObj.send({cfg:this.emqCfgObj,logLevel:this.logLevel}),this.handleScriptDataObj.on("unhandledRejection",(e,a)=>{logger.info("handleScriptDataObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.handleScriptDataObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.handleScriptDataObj.connected&&(this.handleScriptDataObj.send({heartbeat:"pong"}),logger.info("main process send handleScriptDataObj : pong"))})}_createSystemMemDataProcess(){logger.info("创建处理系统内存变量数据的进程"),this.handleSystemMemDataObj=childProcess.fork(path.join(__dirname+"/parse_mem_data/work_process.js")),this.handleSystemMemDataObj.on("error",e=>{logger.error("The handleSystemMemDataObj Error! Error->"+e),this._createSystemMemDataProcess()}),this.handleSystemMemDataObj.on("exit",(e,a)=>{logger.warn("The handleSystemMemDataObj Exit!  Code->"+e+" Signal->"+a),this._createSystemMemDataProcess()}),this.handleSystemMemDataObj.connected&&this.handleSystemMemDataObj.send({emqcfg:this.emqCfgObj,rediscfg:this.redisCfgObj,logLevel:this.logLevel}),this.handleSystemMemDataObj.on("unhandledRejection",(e,a)=>{logger.info("handleSystemMemDataObj Unhandled Rejection at: Promise: ",a,"reason: ",e)}),this.handleSystemMemDataObj.on("message",e=>{"object"==typeof e&&e.hasOwnProperty("heartbeat")&&"ping"===e.heartbeat&&this.handleSystemMemDataObj.connected&&(this.handleSystemMemDataObj.send({heartbeat:"pong"}),logger.info("main process send handleSystemMemDataObj : pong"))})}_readConfigFile(){let e=!0;try{let a=JSON.parse(fs.readFileSync(path.join(__dirname,MAIN_CONFIG_FILE),"utf-8")),t=path.join(global.projectPath,a.RedisCfgFile),r=JSON.parse(fs.readFileSync(path.join(__dirname,MULTINETCARD_MAP_FILE),"utf-8"));if(global.multiIPCfgObj=r,global.accurateSubEnable)if(require("kss-custom-config").isDualRedundancyEnable()){const{getCurRealTimeDBInfo:e}=require("kss-db-config");this.redisCfgObj=e()}else this.redisCfgObj=JSON.parse(fs.readFileSync(t,"utf-8")).realTimeDBInfos;else e=this._readRealDBCfg(t);this.innierIOserverWillTopic=a.InnerIOserverWillTopic,null===this.innierIOserverWillTopic&&logger.error("KIOServer Inner Lost Topic is Null!");let s=path.join(global.projectPath,a.InnerMQCfgFile);e=this._readInnerEMQCfg(s);let i=a.TOPIC;e=this._subscribeOtherTopic(i),this.onlineTopic=a.OnlineConfig,this.handleDataOperate(mqOperateType.SUBSCRIBE,this.onlineTopic);let o=path.join(__dirname,WATCH_CONFIG_FILE);this._watchCfgChange(o)}catch(a){logger.error("ksl_data_manager.js -> _readConfigFile error. "+a.message),e=!1}return e}_readRealDBCfg(e){let a=JSON.parse(fs.readFileSync(e,"utf-8")).realTimeDBInfos;this.redisCfgObj=a;let t=a.mode,r={},s=[];if(0===t){let e=a.singleRedis.connInfo.password;e=global.decryptDatabasePwd(e),a.singleRedis.connInfo.password=e,r={host:a.singleRedis.connInfo.ip,port:a.singleRedis.connInfo.port,password:a.singleRedis.connInfo.password}}else if(1===t){let e=a.multiRedis;for(const a of e){let e=a.connInfo.password;e=global.decryptDatabasePwd(e),a.connInfo.password=e;let t={host:a.connInfo.ip,port:a.connInfo.port,password:a.connInfo.password};s.push(t)}}else logger.warn("redis mode error");return this.redis=new RedisClusterOp(t,r,s).getClient(),!0}_readInnerEMQCfg(e){this.emqCfgObj=JSON.parse(fs.readFileSync(e,"utf-8"));let a=this.emqCfgObj.ip,t=this.emqCfgObj.port;if(void 0===a||void 0===t)return logger.error("The Inner emqCfgFile IP or Port is Undefined! IP->"+a+" port->"+t),!1;let r=this.emqCfgObj.userName,s=this.emqCfgObj.password;s=global.decryptDatabasePwd(s),this.emqCfgObj.password=s;const i={username:r,password:s};return this.otherServiceSubscribeManagerObj=new KSLMQManager(a,t,i),!0}_subscribeOtherTopic(e){return void 0===e?(logger.error("The topicObj is Undefined!"),!1):(this._subscribeOtherServiceInfo(e),!0)}_watchCfgChange(e){Chokidar.watch(e).on("change",e=>{try{let a=JSON.parse(fs.readFileSync(e,"utf-8"));this.isTest=a.IsTest,logger.info("the Test is "+this.isTest)}catch(e){logger.error(e.message)}})}_subscribeOtherServiceInfo(e){for(let a of Object.values(e)){if(global.accurateSubEnable){if(_.startsWith(a,"realtime_subscribe"))continue}else if(_.startsWith(a,"realtime/subscribe")||_.startsWith(a,"realtime/unsubscribe"))continue;this.handleDataOperate(mqOperateType.SUBSCRIBE,a)}}setCollectVarInfo(e,a,t,r,s){this.sourceNameAndTagsMap=new Map,this.clientName=t,this.logLevel=s,this.msg.Type=1,this.msg.Qid=12345678,this.msg.WhoQ=this.clientName,this.msg.PNs={4:"V",5:"T",6:"Q"},this.sourceNameMap=r;for(let[a,t]of e){let e=this._getIPBySourceName(a);if(this.timerSourceMap.has(e)){let a=this.timerSourceMap.get(e);for(let e of Object.keys(t))a[e]=t[e];this.timerSourceMap.set(e,a)}else this.timerSourceMap.set(e,t)}for(let[e,t]of a){let a=this._getIPBySourceName(e),r=this._getNodeBySourceName(e);if(logger.info("sourceName->"+e+" ip->"+a+" node->"+r),void 0!==a)if(this.sourceNameAndTagsMap.has(a)){let e=this.sourceNameAndTagsMap.get(a),s=e.get(r);if(void 0===s)e.set(r,t);else{for(let[e,a]of t)if(s.has(e)){let t=s.get(e);t.push.apply(t,a),s.set(e,t)}else s.set(e,a);this.sourceNameAndTagsMap.set(a,e)}}else{let e=new Map;e.set(r,t),this.sourceNameAndTagsMap.set(a,e)}else logger.error("The ip is undefined! sourceName->"+e)}for(let e of this.sourceNameAndTagsMap.keys()){let a=this.timerSourceMap.get(e);void 0===a&&(a=new Map);let t=this.sourceNameAndTagsMap.get(e),r=this._getNodeNameByIP(e);this.mqManagerObjMap.get(e).setCollectVarInfo(a,t,this.clientName,r,this.logLevel),global.accurateSubEnable||this.mqManagerObjMap.get(e).setRedisObj(this.redis)}}_callback(e){let a=e.topic,t=e.msg;if(0!==t.length)if(logger.info("rec msg from KIO meg length: ",t.length," topic: ",a),a!==this.innierIOserverWillTopic)if(global.accurateSubEnable)this.handleRealDataObj.connected?(logger.info(`采集服务收到数据变化 ${a}`),this.handleRealDataObj.send(e)):logger.error("The handleRealDataObj is Disconnected"),this.handleAlarmDataObj.connected?this.handleAlarmDataObj.send(e):logger.error("The handleAlarmDataObj is Disconnected"),this.handleRunbgDataObj.connected?this.handleRunbgDataObj.send(e):logger.error("The handleRunbgDataObj is Disconnected"),this.handleScriptDataObj.connected?this.handleScriptDataObj.send(e):logger.error("The handleScriptDataObj is Disconnected"),this.writeRedisObj.connected?this.writeRedisObj.send(t):logger.error("The writeRedisObj is Disconnected");else for(let e=0;e<t.length;++e){this.isTest&&logger.info("Send Data to Other Services! Data->"+JSON.stringify(t[e]));for(let a of Object.values(t[e]))this.otherServiceSubscribeManagerObj.handleMQOperate(mqOperateType.PUBLISH,a)}else{if(t.hasOwnProperty("dataSourceNode")){let e=new Date+" The KIOServer is Offline! SourceName->"+t.dataSourceNode;logger.warn(e)}this.handleDataOperate(mqOperateType.PUBLISH,e)}}handleDataOperate(e,a){switch(e){case mqOperateType.SUBSCRIBE:this.otherServiceSubscribeManagerObj.handleMQOperate(e,a,(e,a)=>{this._handleOtherServiceData(e,a)});break;case mqOperateType.PUBLISH:case mqOperateType.UNSUBSCRIBE:this.otherServiceSubscribeManagerObj.handleMQOperate(e,a)}}_handleOtherServiceData(e,a){if(void 0===e||void 0===a)return void logger.error("The Topic or RecvData is Undefined! Topic->"+e+" RecvData->"+a);let t={};try{t=JSON.parse(a)}catch(e){return void logger.error("Other Service Data Error->"+e)}let r={};if(r.topic=e,e.includes(this.onlineTopic)&&this._handleOnlineCfg(t),e.includes("ioserver_active_info")&&this._ioSwitchHandle(t),global.accurateSubEnable)r.msg=t,e.includes("alarm_subscribe")?this.handleAlarmDataObj.send(r):e.includes("realtime")?this.handleRealDataObj.send(r):e.includes("iotag_subscribe")?this.handleRunbgDataObj.send(r):e.includes("script_subscribe")?this.handleScriptDataObj.send(r):e.includes(this.onlineTopic)?this._handleOnlineCfg(t):logger.error("There is no topic->"+e);else{r.recvJsonObj=t;for(let e of this.sourceNameAndTagsMap.keys())this.mqManagerObjMap.get(e).setOtherServiceData(r)}}_ioSwitchHandle(e){e.topic="ioserver_changed",e.msg=e.data;let a=e.msg.project;if(global.activeKioMap.has(a)?global.activeKioMap.set(a,e.msg.ip):logger.info("io project is not exist!"),global.multiIPCfgObj.isMultiNetCard){let a="main"===global.multiIPCfgObj[e.msg.ip]?global.mainKIOInfoIP:global.slaveKIOInfoIP;e.msg.ip=a}this.handleDataOperate(mqOperateType.PUBLISH,e)}collectData(){this._subscribeCollectData(),this._timedCollectData(),this._queryAllTags()}_subscribeCollectData(){for(let e of this.sourceNameAndTagsMap.keys()){logger.debug("IP->"+e);let a=this._getNodeNameByIP(e);for(let t=0;t<a.length;++t)for(let r=0;r<subscribeMQTopicName.length;++r){let s=void 0;s=DATA_CHANGE_TOPIC!==r?subscribeMQTopicName[r]+a[t]+"_"+this.clientName:subscribeMQTopicName[r]+a[t],this.mqManagerObjMap.get(e).handleDataOperate(mqOperateType.SUBSCRIBE,s)}}return!0}_timedCollectData(){for(let e of this.sourceNameAndTagsMap.keys())this.mqManagerObjMap.get(e).timedCollectData()}_queryAllTags(){for(let[e,a]of this.sourceNameAndTagsMap){let t=this._getNodeNameByIP(e);for(let r=0;r<t.length;++r){let s=publishMQTopicName[0]+t[r],i=a.get(t[r]);if(void 0!==i){this.msg.ObjNs=Array.from(i.keys());let a={topic:s,msg:this.msg,options:{qos:2,retain:!0}};logger.info("Publish Topic->"+s+" Publish Length->"+Array.from(i.keys()).length),this.mqManagerObjMap.get(e).handleDataOperate(mqOperateType.PUBLISH,a)}else logger.error("This node is undefined! node->"+t[r])}}}_getIPBySourceName(e){for(let[a,t]of this.sourceNameMap)if(a===e)return t.ip}_getNodeBySourceName(e){for(let[a,t]of this.sourceNameMap)if(a===e)return t.node}_getNodeNameByIP(e){let a=[];for(let t of this.sourceNameMap.values())t.ip===e&&a.push(t.node);return a}}module.exports=KSLDataManager;